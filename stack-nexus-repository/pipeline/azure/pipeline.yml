# YAML anchors
shared:
# Task : sync and merge with rsync 2 rep. Used to merge stack and config
- &merge-stack-and-config
  platform: linux
  image_resource:
    type: registry-image
    source:
      repository: cycloid/cycloid-toolkit
      tag: latest
  run:
    path: /usr/bin/merge-stack-and-config


resource_types:
- name: terraform
  type: registry-image
  source:
    repository: cycloid/terraform-resource
    tag: ((terraform_version))


resources:
- name: tfstate
  type: terraform
  icon: terraform
  source:
    env_name: ((env))
    backend_type: http
    backend_config:
      address: '((cycloid_api_url))/inventory?jwt=($ inventory_jwt $)'
    vars:
      azure_cred: ((azure_cred))
      keypair_public: ((keypair_public))
      env: ((env))
      project: ((project))
      customer: ((customer))

# The Terraform stack (will be merged with the config)
- name: git_stack-terraform
  type: git
  icon: git
  source:
    uri: ((stack_git_repository))
    branch: ((stack_git_branch))
    # private_key: ((stack_git_private_key))
    # username: ((stack_git_username))
    # password: ((stack_git_token))
    paths:
      - ((stack_terraform_path))/*

# The Terraform config (will be merged with the stack)
- name: git_config-terraform
  type: git
  icon: git
  source:
    uri: ((config_git_repository))
    branch: ((config_git_branch))
    private_key: ((config_git_private_key))
    # username: ((config_git_username))
    # password: ((config_git_token))
    paths:
      - ((config_terraform_path))/*

# The Ansible stack (will be merged with the config)
- name: git_stack-ansible
  type: git
  icon: git
  source:
    uri: ((stack_git_repository))
    branch: ((stack_git_branch))
    # private_key: ((stack_git_private_key))
    # username: ((stack_git_username))
    # password: ((stack_git_token))
    paths:
      - ((stack_ansible_path))/*

# The Ansible config (will be merged with the stack)
- name: git_config-ansible
  type: git
  icon: git
  source:
    uri: ((config_git_repository))
    branch: ((config_git_branch))
    private_key: ((config_git_private_key))
    # username: ((config_git_username))
    # password: ((config_git_token))
    paths:
      - ((config_ansible_path))/*


groups:
- name: overview
  jobs:
    - terraform-plan
    - terraform-apply
    - deploy-nexus
    
- name: destroy
  jobs:
    - terraform-destroy


jobs:
  # Merge and trigger a plan whenever there is a commit in Terraform stack or config
  - name: terraform-plan
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: true

        - get: git_config-terraform
          trigger: true

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
          outputs:
          - name: merged-stack
            path: "merged-stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((stack_terraform_path))

      - put: tfstate
        params:
          plan_only: true
          terraform_source: merged-stack/


  # Merge and trigger an apply whenever there is a terraform plan passed successfully
  - name: terraform-apply
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: git_config-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: tfstate
          trigger: false
          passed:
            - terraform-plan

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
          outputs:
          - name: merged-stack
            path: "merged-stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((stack_terraform_path))

      - put: tfstate
        params:
          plan_run: true
          terraform_source: merged-stack/


  - name: deploy-nexus
    serial: true
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-ansible
          trigger: true

        - get: git_config-ansible
          trigger: true

        - get: tfstate
          trigger: true
          passed:
            - terraform-apply

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-ansible
            path: "config"
          - name: git_stack-ansible
            path: "stack"
          - name: tfstate
            path: "terraform"
          outputs:
          - name: merged-stack
            path: "merged-stack"
          - name: output-var
            path: "output-var"
        params:
          CONFIG_PATH: ((config_ansible_path))
          STACK_PATH: ((stack_ansible_path))

      - task: run-ansible
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: ((ansible_version))
          run:
            path: /usr/bin/ansible-runner
          caches:
            - path: ansible-playbook/roles
          inputs:
          - name: merged-stack
            path: ansible-playbook
        params:
          #+ Parameters of ansible-runner script. Can be found here: https://github.com/cycloidio/docker-cycloid-toolkit#ansible-runner
          ANSIBLE_REMOTE_USER: nexus
          SSH_PRIVATE_KEY: ((keypair_private))
          AZURE_USE_PRIVATE_IP: False # Force to connect to public IP because we don't use a bastion in this stack
          CY_AZURE_CRED: ((azure_cred))
          ANSIBLE_PLAYBOOK_PATH: ansible-playbook
          ANSIBLE_PLAYBOOK_NAME: site.yml
          ANSIBLE_EXTRA_VARS:
            env: ((env))
            project: ((project))
            customer: ((customer))

      - task: run-operations
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: bitnami/azure-cli
              tag: latest
          run:
            path: /bin/bash
            args:
              - '-c'
              - |
                source ansible-playbook/env
                echo "Resource group name: ${resource_group_name}"
                echo "Virtual machine name: ${vm_name}"
                echo "Requested VM instance status: ${vm_instance_status}"
                if [[ "$vm_instance_status" = "Running" ]]; then
                  echo "Starting instance..."
                  az login --service-principal --username ${AZURE_CLIENT_ID} --password ${AZURE_CLIENT_SECRET} --tenant ${AZURE_TENANT_ID}
                  az vm start --resource-group ${resource_group_name} --name ${vm_name}
                  exit 0
                fi
                if [[ "$vm_instance_status" = "Stopped" ]]; then
                  echo "Stopping instance..."
                  az login --service-principal --username ${AZURE_CLIENT_ID} --password ${AZURE_CLIENT_SECRET} --tenant ${AZURE_TENANT_ID}
                  az vm stop --resource-group ${resource_group_name} --name ${vm_name}
                  exit 0
                fi
          inputs:
          - name: merged-stack
            path: ansible-playbook
        params:
          vm_instance_status: ((vm_instance_status))
          AZURE_TENANT_ID: ((azure_tenant_id))
          AZURE_CLIENT_ID: ((azure_client_id))
          AZURE_CLIENT_SECRET: ((azure_client_secret))


  # Destroy the infrastructure
  - name: terraform-destroy
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: git_config-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: tfstate
          trigger: false

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
          outputs:
          - name: merged-stack
            path: "merged-stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((stack_terraform_path))

      - put: tfstate
        params:
          action: destroy
          terraform_source: merged-stack/
        get_params:
          action: destroy
